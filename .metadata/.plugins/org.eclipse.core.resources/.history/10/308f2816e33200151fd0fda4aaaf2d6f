package com.hackbulgaria.programming51.week7a;

import java.util.LinkedList;
import java.util.Queue;
import java.lang.Package.

public class Stack<T> {

	// use only this interface:
	// public interface Queue<T> {
	// public T pop(); // removes the head and returns it
	// public T peek(); // only returns the head without removing it
	// public boolean isEmpty(); // returns true if empty
	// public void push(T data); // pushes data into the queue
	// }

	private Queue<T> firstQueue = new LinkedList<T>();
	private Queue<T> secondQueue = new LinkedList<T>();

	public T pop() {
		return firstQueue.poll();
	}

	public T peek() {
		return firstQueue.peek();
	}

	public boolean isEmpty() {
		return firstQueue.peek() == null;
	}

	public String toString() {

		String result = "";

		for (int i = 0; i < firstQueue.size(); i++) {
			result += ", " + firstQueue.poll();
		}

		return result;

	}

	public void push(T data) {
		secondQueue.push(data);
		while (!firstQueue.empty()) {
			secondQueue.push(firstQueue.pop());
		}
		secondQueue = firstQueue;
	}

	public static void main(String[] args) {
		Stack<Integer> s = new Stack<>();
		for (int i = 10; i < 20; i++) {
			s.push(i);
		}
		System.out.println(s);
	}
}
